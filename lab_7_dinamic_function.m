function q_dd = lab_7_dinamic_function(tau, theta_1, theta_2, theta_1_d, theta_2_d, a_1, a_2, m_1, m_2, g)
    % This function calculates the dinamic function of the 2D link robot
    theta_d = [theta_1_d theta_2_d]';
    if nargin < 10
        g = 9.81;
    end
    M = [...
    m_1 0 m_2 0;...
    0 m_1 0 m_2;...
    0 0 m_2 0;...
    0 0 0 m_2;...
    ];
    F = [1 -1; 0 1];
    I = [...
        inertia(m_1, a_1) 0;...
        inertia(m_2, a_2) inertia(m_2, a_2);...
        ];
    B = F\a_matrix(theta_1, theta_2, a_1, a_2)*M*d_matrix(theta_1, theta_2, a_1, a_2) + inv(F)*I;
    C = F\a_matrix(theta_1, theta_2, a_1, a_2)*M*e_matirx(theta_1, theta_2, theta_1_d, theta_2_d, a_1, a_2);
    g = [m_1*g*a_1*0.5*cos(theta_1)+m_2*g*(a_2*0.5*cos(theta_1+theta_2)+a_1*cos(theta_1));...
        m_2*g*a_2*0.5*cos(theta_1+theta_2)];
    q_dd = B\(tau - C*theta_d) - g;
end

function I = inertia(m, l)
    I = 1/3*m*l^2;
end

function A = a_matrix(theta_1, theta_2, a_1, a_2)
    A = [...
        -a_1*0.5*sin(theta_1) a_1*0.5*cos(theta_1) -a_1*0.5*sin(theta_1) a_1*0.5*cos(theta_1);...
        0 0 -a_2*0.5*sin(theta_1 + theta_2) a_2*0.5*cos(theta_1 + theta_2);...
        ];
end 

function D = d_matrix(theta_1, theta_2, a_1, a_2)
    D = [...
        -a_1*0.5*sin(theta_1) 0;...
        a_1*0.5*cos(theta_1) 0;...
        -a_1*sin(theta_1)-a_2*0.5*sin(theta_1+theta_2) -a_2*0.5*sin(theta_1+theta_2);...
        a_1*cos(theta_1)+a_2*0.5*cos(theta_1+theta_2) a_2*0.5*cos(theta_1+theta_2);...
        ];
end 

function E = e_matirx(theta_1, theta_2, theta_1_d, theta_2_d, a_1, a_2)
    E = [...
        -a_1*0.5*cos(theta_1)*theta_1_d 0;...
        -a_1*0.5*sin(theta_1)*theta_1_d 0;...
        -a_1*cos(theta_1)*theta_1_d-a_2*0.5*cos(theta_1+theta_2)*theta_1_d -a_2*0.5*cos(theta_1+theta_2)*theta_2_d-a_2*cos(theta_1+theta_2)*theta_1_d;...
        -a_1*sin(theta_1)*theta_1_d-a_2*0.5*sin(theta_1+theta_2)*theta_1_d -a_2*0.5*sin(theta_1+theta_2)*theta_2_d-a_2*sin(theta_1+theta_2)*theta_1_d;...
        ];
end